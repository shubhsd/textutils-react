{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","defaultProps","aboutText","TextForm","useState","text","setText","style","color","heading","backgroundColor","rows","onChange","event","target","value","placeholder","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.04c14b3b.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Alert(props) {\n\n    const capitalize = (word) => {\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    };\n\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\n        </div>\n    )\n}\n\nexport default Alert\n","import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom'\n\n// Proptypes check the type of props received and validates if it is correct or not.\n// Default props - if let say value of the written prop is not passed then it will write that default value there instead of showing error\n// you can check this by commenting props passed in app.js\n\nfunction Navbar(props) {\n    return (\n        // for light navbar\n        // <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        // {/* For dark navbar use class below  */}\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n                        </li>\n                        {/* <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\n                        </li> */}\n                    </ul>\n\n                    <form className=\"d-flex\">\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable light mode</label>\n                        </div>\n                        {/* <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button className=\"btn btn-danger\" type=\"submit\">Search</button> */}\n                    </form>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string\n}\n// if default props not set and we have kept any prop as isRequired and if it is not passed then we will get error\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'Set about text here'\n}\n\nexport default Navbar\n","import React, { useState } from 'react'\n\nexport default function TextForm(props) {\n\n    const [text, setText] = useState('');\n    // string 'enter text here' is the default value for the state defined in the hook.\n\n    const handleUpperCaseClick = () => {\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert('Converted to uppercase', 'success');\n    };\n\n    const handleLowerCaseClick = () => {\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert('Converted to lowercase', 'success');\n    };\n\n    const handleClearClick = () => {\n        let newText = '';\n        setText(newText);\n        props.showAlert('Text cleared', 'success');\n    };\n\n    const handleCopy = () => {\n        const text = document.getElementById('myBox');\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert('Copied to clipboard', 'success');\n    };\n\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(' '));\n        props.showAlert('Extra spaces removed', 'success');\n    };\n\n    const handleOnChange = (event) => {\n        setText(event.target.value);\n    };\n\n    return (\n        <>\n            <div className='container' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\n                <h1>{props.heading}</h1>\n                <div className=\"mb-3\">\n                    <textarea className=\"form-control\" id=\"myBox\" style={{ backgroundColor: props.mode === 'dark' ? '#042743' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }} rows=\"8\" onChange={handleOnChange} value={text} placeholder='Enter text here'></textarea>\n                </div>\n                <button className='btn btn-primary mx-2' onClick={handleUpperCaseClick}>Convert to uppercase</button>\n                <button className='btn btn-primary mx-2' onClick={handleLowerCaseClick}>Convert to lowercase</button>\n                <button className='btn btn-primary mx-2' onClick={handleCopy}>Copy Text</button>\n                <button className='btn btn-primary mx-2' onClick={handleExtraSpaces}>Remove extra spaces</button>\n                <button className='btn btn-primary mx-2' onClick={handleClearClick}>Clear Text</button>\n                {/* mx-2 bootstrap class gives margin in x  */}\n            </div>\n\n            <div className='container my-3' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\n                <h3>Your text summary</h3>\n                {/* text.split gives array also note that .split('') makes array length = 1. Therefor space will be counted as a word */}\n                <p>{text.split(\" \").length} words and {text.length} characters.</p>\n                <p>{0.008 * text.split(\" \").length} Minutes read.</p>\n\n                <h3>Preview</h3>\n                <p>{text.length > 0 ? text : 'Enter something in text box above to preview it here'}</p>\n            </div>\n        </>\n    )\n}\n","import React, { useState } from 'react'\nimport './App.css';\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light'); //Tells wheather dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert('Dark mode has been enabled', 'success');\n      document.title = 'TextUtils - Dark Mode';\n\n      //Interval to display flash kind of a message in browser tab - not a good UX. (Just for understanding purpose)\n      // setInterval(() => {\n      //   document.title = 'TextUtils is amazing';\n      // }, 2000);\n\n      // setInterval(() => {\n      //   document.title = 'Install text utils now';\n      // }, 1500);\n\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled', 'success');\n      document.title = 'TextUtils - Light Mode';\n    }\n  };\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title='TextUtils' aboutText='About' mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className='container my-3'>\n          {/* <Switch> */}\n            {/* Use exact to let our route match the exact component other wise it will fetch partially */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm heading='Enter the text to analyze below' mode={mode} showAlert={showAlert} />\n            {/* </Route> */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}